# 권장시간: 60분
# 권장 시간 복잡도: O(M+NlogN)

"""
슈퍼 게임 개발자 오렐리는 큰 고민에 빠졌습니다. 그녀가 만든 프렌즈 오천성이 대성공을 거뒀지만
최근 신규 사용자 수가 급감했기 때문입니다. 원인은 신규 사용자와 기존 사용자 사이에 스테이지
차이가 너무 큰 것이 문제였습니다. 이 문제를 어떻게 할까 고민한 그녀는 동적으로 게임 시간을
늘려서 난이도를 조절하기로 했습니다. 역시 슈퍼 개발자라 대부분의 로직은 쉽게 구현했지만 실패율을
구하는 부분에서 위기에 빠지고 말았습니다. 오렐리를 위해 실패율을 구하는 코드를 완성하세요.

- 실패율 정의
스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어의 수

전체 스테이지 개수가 N, 게임을 이용하는 사용자가 현재 멈춰 있는 스테이지의 번호가 담긴 배열
stages가 주어질 때 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨 있는 배열을
반환하도록 solution() 함수를 완성하세요

- 제약조건:
    - 스테이지 개수 N은 1이상 500이하의 자연수이다.
    - stages의 길이는 1이상 200,000 이하입니다.
    - stages에는 1이상 N+1이하의 자연수가 있습니다.
        - 각 자연수는 사용자가 현재 도전 중인 스테이지 번호를 나타냅니다.
        - 단, N+1은 마지막 스테이지, 즉 N까지 클리어한 사용자를 나타냅니다.
    - 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오면 됩니다.
    - 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0으로 정의합니다.

- 입출력의 예
N: 5, stages: [2,1,2,6,2,4,3,3] -> [3,4,2,1,5]
N: 4, stages: [4,4,4,4,4] -> [4,1,2,3]

첫 번째 입출력 예를 보면 1번 스테이지에서는 총 8명의 사용자가 도전했으며
이 중 1명의 사용자가 아직 클리어하지 못했습니다. 따라서 1번 스테이지의 실패율은
1/8 입니다.

2번 스테이지에서는 총 7명의 사용자가 도전했으며, 이 중 3명의 사용자가 아직 클리어하지 못했습니다.
따라서 2번 스테이지의 실패율은 3/7 입니다.

마찬가지로 나머지 스테이지 실패율은 다음과 같습니다.
3번 스테이지 실패율: 2/4
4번 스테이지 실패율: 1/2
5번 스테이지 실패율: 0/1

각 스테이지의 번호를 실패율의 내림차순으로 정렬하면 [3,4,2,1,5] 입니다.

두 번째 입출력 예를 보면 모든 사용자가 마지막 스테이지에 있으므로 4번 스테이지의 실패율은 1이며
나머지 스테이지의 실패율은 0입니다. [4,1,2,3]
"""

# 사용자의 스테이지 [2, 1, 2, 6, 2, 4, 3, 3]
# 전체 스테이지는 5
# 총 8명이 진행 중
# 1번 스테이지: 8명 도전, 1명 실패 => 1/8 => 0.125
# 2번 스테이지: 7명 도전, 3명 실패 => 3/7 => 0.428
# 3번 스테이지: 4명 도전, 2명 실패 => 2/4 => 0.5
# 4번 스테이지: 2명 도전, 1명 실패 => 1/2 => 0.5
# 5번 스테이지: 1명 도전, 0명 실패 => 0
# [3, 4, 2, 1, 5]

# 사용자 스테이지 [4, 4, 4, 4, 4]
# 전체 스테이지는 4
# 총 5명이 진행 중
# 1번 스테이지: 5명 도전, 0명 실패 => 0
# 2번 스테이지: 5명 도전, 0명 실패 => 0
# 3번 스테이지: 5명 도전, 0명 실패 => 0
# 4번 스테이지: 5명 도전, 5명 실패 => 5/5
# 5번 스테이지: 0명 도전 ---- pass
# [4, 1, 2, 3]

# idea:
# 실패한 사람이 없으면 0
# 실패한 사람이 있을 경우: 실패한 사람의 수 / 도전한 사람 수
# 그리고 다음 순환때: 도전한 사람 수 - 실패한 사람의 수
# 최후 정렬 (index)


# Test1 >> 시간복잡도 초과

# 입력값: N, array
"""
def solution(N, arr):
    # result dict 생성
    result = {}
    arr.sort() # >> 병목현상
    # 스테이지 별로 순회
    for stage in range(1, N + 1):
        # 스테이지가 사용자 스테이지에 포함이 되면
        if stage in arr:
            # 몇 명인지 확인
            failure = arr.count(stage)
            # 실패율 계산
            fail_ratio = failure / len(arr)
            # result에 추가
            result[stage] = fail_ratio
            # 사용자 스테이지에서 실패한 사용자 수만큼 slice
            arr = arr[failure:]       # >> 병목현상
        # 스테이지가 사용자 스테이지에 포함이 되지 않으면
        else:
            # 실패한 사용자 없음, 실패율 = 0
            result[stage] = 0
    # result 내림차순 정렬: key -> index에 대한 value
    return sorted(result, reverse=True, key=lambda x: result[x])
"""


# 입력값: N , array
def solution(N, arr):
    from collections import Counter

    # 스테이지 별 도전자 수 집계
    counts = Counter(arr)
    players = len(arr)
    result = {}
    # 스테이지에 도달한 인원을 뒤로 갈수록 줄임, 실패율 계산
    for stage in range(1, N + 1):  # O(M)
        failure = counts.get(stage, 0)
        fail_ratio = (failure / players) if players > 0 else 0.0
        result[stage] = fail_ratio
        players -= failure
    # 내림차순 정렬
    return sorted(result.keys(), key=lambda x: result[x], reverse=True)  # O(NlogN)


assert solution(5, [2, 1, 2, 6, 2, 4, 3, 3]) == [3, 4, 2, 1, 5]
assert solution(4, [4, 4, 4, 4, 4]) == [4, 1, 2, 3]
